name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create environment file
      run: |
        cat > .env << EOF
        SECRET_KEY=test-secret-key-for-ci
        DEBUG=True
        POSTGRES_DB=test_db
        POSTGRES_USER=test_user
        POSTGRES_PASSWORD=test_password
        DB_NAME=test_db
        DB_USER=test_user
        DB_PASSWORD=test_password
        DB_HOST=localhost
        DB_PORT=5432
        REDIS_HOST=localhost
        REDIS_PORT=6379
        REDIS_URL=redis://localhost:6379/0
        ALLOWED_HOSTS=localhost,127.0.0.1,testserver
        EOF

    - name: Run migrations
      run: |
        python manage.py migrate

    - name: Run tests
      run: |
        python manage.py test

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: success()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        cat << 'EOF' > ~/.ssh/id_rsa
        ${{ secrets.SSH_PRIVATE_KEY }}
        EOF
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
        chmod 644 ~/.ssh/known_hosts

    - name: Test SSH connection
      run: |
        ssh -v -i ~/.ssh/id_rsa ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "echo 'SSH connection successful'"

    - name: Copy files to remote server
      run: |
        tar -czf /tmp/deploy.tar.gz \
          --exclude='.git' \
          --exclude='.github' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          --exclude='.pytest_cache' \
          --exclude='venv' \
          --exclude='.env' \
          .
        
        scp -i ~/.ssh/id_rsa /tmp/deploy.tar.gz ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/
        
        ssh -i ~/.ssh/id_rsa ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
          mkdir -p /home/${{ secrets.SERVER_USER }}/app
          tar -xzf /tmp/deploy.tar.gz -C /home/${{ secrets.SERVER_USER }}/app
          rm /tmp/deploy.tar.gz
        "
        rm /tmp/deploy.tar.gz

    - name: Deploy on remote server
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
          cd /home/${{ secrets.SERVER_USER }}/app
          docker compose down
          docker compose up -d --build
          sleep 15
          docker compose exec web python manage.py migrate --noinput
          docker compose exec web python manage.py collectstatic --noinput
          echo 'Deployment completed successfully'
        "